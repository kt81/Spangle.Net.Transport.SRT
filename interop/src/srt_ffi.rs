/* automatically generated by csbindgen */

#[allow(unused)]
use ::std::os::raw::*;

use super::srt::*;


#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_startup(

) -> c_int
{
    srt_startup(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_cleanup(

) -> c_int
{
    srt_cleanup(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_socket(
    arg1: c_int,
    arg2: c_int,
    arg3: c_int
) -> SRTSOCKET
{
    srt_socket(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_create_socket(

) -> SRTSOCKET
{
    srt_create_socket(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_bind(
    u: SRTSOCKET,
    name: *const sockaddr,
    namelen: c_int
) -> c_int
{
    srt_bind(
        u,
        name,
        namelen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_bind_acquire(
    u: SRTSOCKET,
    sys_udp_sock: UDPSOCKET
) -> c_int
{
    srt_bind_acquire(
        u,
        sys_udp_sock
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_listen(
    u: SRTSOCKET,
    backlog: c_int
) -> c_int
{
    srt_listen(
        u,
        backlog
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_accept(
    u: SRTSOCKET,
    addr: *mut sockaddr,
    addrlen: *mut c_int
) -> SRTSOCKET
{
    srt_accept(
        u,
        addr,
        addrlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_accept_bond(
    listeners: *const SRTSOCKET,
    lsize: c_int,
    msTimeOut: i64
) -> SRTSOCKET
{
    srt_accept_bond(
        listeners,
        lsize,
        msTimeOut
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_listen_callback(
    lsn: SRTSOCKET,
    hook_fn: srt_listen_callback_fn,
    hook_opaque: *mut c_void
) -> c_int
{
    srt_listen_callback(
        lsn,
        hook_fn,
        hook_opaque
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_connect_callback(
    clr: SRTSOCKET,
    hook_fn: srt_connect_callback_fn,
    hook_opaque: *mut c_void
) -> c_int
{
    srt_connect_callback(
        clr,
        hook_fn,
        hook_opaque
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_connect(
    u: SRTSOCKET,
    name: *const sockaddr,
    namelen: c_int
) -> c_int
{
    srt_connect(
        u,
        name,
        namelen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_connect_debug(
    u: SRTSOCKET,
    name: *const sockaddr,
    namelen: c_int,
    forced_isn: c_int
) -> c_int
{
    srt_connect_debug(
        u,
        name,
        namelen,
        forced_isn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_connect_bind(
    u: SRTSOCKET,
    source: *const sockaddr,
    target: *const sockaddr,
    len: c_int
) -> c_int
{
    srt_connect_bind(
        u,
        source,
        target,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_rendezvous(
    u: SRTSOCKET,
    local_name: *const sockaddr,
    local_namelen: c_int,
    remote_name: *const sockaddr,
    remote_namelen: c_int
) -> c_int
{
    srt_rendezvous(
        u,
        local_name,
        local_namelen,
        remote_name,
        remote_namelen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_close(
    u: SRTSOCKET
) -> c_int
{
    srt_close(
        u
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_getpeername(
    u: SRTSOCKET,
    name: *mut sockaddr,
    namelen: *mut c_int
) -> c_int
{
    srt_getpeername(
        u,
        name,
        namelen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_getsockname(
    u: SRTSOCKET,
    name: *mut sockaddr,
    namelen: *mut c_int
) -> c_int
{
    srt_getsockname(
        u,
        name,
        namelen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_getsockopt(
    u: SRTSOCKET,
    level: c_int,
    optname: SRT_SOCKOPT,
    optval: *mut c_void,
    optlen: *mut c_int
) -> c_int
{
    srt_getsockopt(
        u,
        level,
        optname,
        optval,
        optlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_setsockopt(
    u: SRTSOCKET,
    level: c_int,
    optname: SRT_SOCKOPT,
    optval: *const c_void,
    optlen: c_int
) -> c_int
{
    srt_setsockopt(
        u,
        level,
        optname,
        optval,
        optlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_getsockflag(
    u: SRTSOCKET,
    opt: SRT_SOCKOPT,
    optval: *mut c_void,
    optlen: *mut c_int
) -> c_int
{
    srt_getsockflag(
        u,
        opt,
        optval,
        optlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_setsockflag(
    u: SRTSOCKET,
    opt: SRT_SOCKOPT,
    optval: *const c_void,
    optlen: c_int
) -> c_int
{
    srt_setsockflag(
        u,
        opt,
        optval,
        optlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_msgctrl_init(
    mctrl: *mut SRT_MSGCTRL
)
{
    srt_msgctrl_init(
        mctrl
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_send(
    u: SRTSOCKET,
    buf: *const c_char,
    len: c_int
) -> c_int
{
    srt_send(
        u,
        buf,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_sendmsg(
    u: SRTSOCKET,
    buf: *const c_char,
    len: c_int,
    ttl: c_int,
    inorder: c_int
) -> c_int
{
    srt_sendmsg(
        u,
        buf,
        len,
        ttl,
        inorder
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_sendmsg2(
    u: SRTSOCKET,
    buf: *const c_char,
    len: c_int,
    mctrl: *mut SRT_MSGCTRL
) -> c_int
{
    srt_sendmsg2(
        u,
        buf,
        len,
        mctrl
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_recv(
    u: SRTSOCKET,
    buf: *mut c_char,
    len: c_int
) -> c_int
{
    srt_recv(
        u,
        buf,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_recvmsg(
    u: SRTSOCKET,
    buf: *mut c_char,
    len: c_int
) -> c_int
{
    srt_recvmsg(
        u,
        buf,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_recvmsg2(
    u: SRTSOCKET,
    buf: *mut c_char,
    len: c_int,
    mctrl: *mut SRT_MSGCTRL
) -> c_int
{
    srt_recvmsg2(
        u,
        buf,
        len,
        mctrl
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_sendfile(
    u: SRTSOCKET,
    path: *const c_char,
    offset: *mut i64,
    size: i64,
    block: c_int
) -> i64
{
    srt_sendfile(
        u,
        path,
        offset,
        size,
        block
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_recvfile(
    u: SRTSOCKET,
    path: *const c_char,
    offset: *mut i64,
    size: i64,
    block: c_int
) -> i64
{
    srt_recvfile(
        u,
        path,
        offset,
        size,
        block
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_getlasterror_str(

) -> *const c_char
{
    srt_getlasterror_str(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_getlasterror(
    errno_loc: *mut c_int
) -> c_int
{
    srt_getlasterror(
        errno_loc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_strerror(
    code: c_int,
    errnoval: c_int
) -> *const c_char
{
    srt_strerror(
        code,
        errnoval
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_clearlasterror(

)
{
    srt_clearlasterror(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_bstats(
    u: SRTSOCKET,
    perf: *mut SRT_TRACEBSTATS,
    clear: c_int
) -> c_int
{
    srt_bstats(
        u,
        perf,
        clear
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_bistats(
    u: SRTSOCKET,
    perf: *mut SRT_TRACEBSTATS,
    clear: c_int,
    instantaneous: c_int
) -> c_int
{
    srt_bistats(
        u,
        perf,
        clear,
        instantaneous
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_getsockstate(
    u: SRTSOCKET
) -> SRT_SOCKSTATUS
{
    srt_getsockstate(
        u
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_epoll_create(

) -> c_int
{
    srt_epoll_create(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_epoll_clear_usocks(
    eid: c_int
) -> c_int
{
    srt_epoll_clear_usocks(
        eid
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_epoll_add_usock(
    eid: c_int,
    u: SRTSOCKET,
    events: *const c_int
) -> c_int
{
    srt_epoll_add_usock(
        eid,
        u,
        events
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_epoll_add_ssock(
    eid: c_int,
    s: SYSSOCKET,
    events: *const c_int
) -> c_int
{
    srt_epoll_add_ssock(
        eid,
        s,
        events
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_epoll_remove_usock(
    eid: c_int,
    u: SRTSOCKET
) -> c_int
{
    srt_epoll_remove_usock(
        eid,
        u
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_epoll_remove_ssock(
    eid: c_int,
    s: SYSSOCKET
) -> c_int
{
    srt_epoll_remove_ssock(
        eid,
        s
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_epoll_update_usock(
    eid: c_int,
    u: SRTSOCKET,
    events: *const c_int
) -> c_int
{
    srt_epoll_update_usock(
        eid,
        u,
        events
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_epoll_update_ssock(
    eid: c_int,
    s: SYSSOCKET,
    events: *const c_int
) -> c_int
{
    srt_epoll_update_ssock(
        eid,
        s,
        events
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_epoll_wait(
    eid: c_int,
    readfds: *mut SRTSOCKET,
    rnum: *mut c_int,
    writefds: *mut SRTSOCKET,
    wnum: *mut c_int,
    msTimeOut: i64,
    lrfds: *mut SYSSOCKET,
    lrnum: *mut c_int,
    lwfds: *mut SYSSOCKET,
    lwnum: *mut c_int
) -> c_int
{
    srt_epoll_wait(
        eid,
        readfds,
        rnum,
        writefds,
        wnum,
        msTimeOut,
        lrfds,
        lrnum,
        lwfds,
        lwnum
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_epoll_uwait(
    eid: c_int,
    fdsSet: *mut SRT_EPOLL_EVENT,
    fdsSize: c_int,
    msTimeOut: i64
) -> c_int
{
    srt_epoll_uwait(
        eid,
        fdsSet,
        fdsSize,
        msTimeOut
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_epoll_set(
    eid: c_int,
    flags: i32
) -> i32
{
    srt_epoll_set(
        eid,
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_epoll_release(
    eid: c_int
) -> c_int
{
    srt_epoll_release(
        eid
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_setloglevel(
    ll: c_int
)
{
    srt_setloglevel(
        ll
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_addlogfa(
    fa: c_int
)
{
    srt_addlogfa(
        fa
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_dellogfa(
    fa: c_int
)
{
    srt_dellogfa(
        fa
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_resetlogfa(
    fara: *const c_int,
    fara_size: usize
)
{
    srt_resetlogfa(
        fara,
        fara_size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_setloghandler(
    opaque: *mut c_void,
    handler: SRT_LOG_HANDLER_FN
)
{
    srt_setloghandler(
        opaque,
        handler
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_setlogflags(
    flags: c_int
)
{
    srt_setlogflags(
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_getsndbuffer(
    sock: SRTSOCKET,
    blocks: *mut usize,
    bytes: *mut usize
) -> c_int
{
    srt_getsndbuffer(
        sock,
        blocks,
        bytes
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_getrejectreason(
    sock: SRTSOCKET
) -> c_int
{
    srt_getrejectreason(
        sock
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_setrejectreason(
    sock: SRTSOCKET,
    value: c_int
) -> c_int
{
    srt_setrejectreason(
        sock,
        value
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_rejectreason_str(
    id: c_int
) -> *const c_char
{
    srt_rejectreason_str(
        id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_getversion(

) -> u32
{
    srt_getversion(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_time_now(

) -> i64
{
    srt_time_now(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_connection_time(
    sock: SRTSOCKET
) -> i64
{
    srt_connection_time(
        sock
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_clock_type(

) -> c_int
{
    srt_clock_type(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_create_group(
    arg1: SRT_GROUP_TYPE
) -> SRTSOCKET
{
    srt_create_group(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_groupof(
    socket: SRTSOCKET
) -> SRTSOCKET
{
    srt_groupof(
        socket
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_group_data(
    socketgroup: SRTSOCKET,
    output: *mut SRT_SOCKGROUPDATA,
    inoutlen: *mut usize
) -> c_int
{
    srt_group_data(
        socketgroup,
        output,
        inoutlen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_create_config(

) -> *mut SRT_SOCKOPT_CONFIG
{
    srt_create_config(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_delete_config(
    config: *mut SRT_SOCKOPT_CONFIG
)
{
    srt_delete_config(
        config
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_config_add(
    config: *mut SRT_SOCKOPT_CONFIG,
    option: SRT_SOCKOPT,
    contents: *const c_void,
    len: c_int
) -> c_int
{
    srt_config_add(
        config,
        option,
        contents,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_prepare_endpoint(
    src: *const sockaddr,
    adr: *const sockaddr,
    namelen: c_int
) -> SRT_SOCKGROUPCONFIG
{
    srt_prepare_endpoint(
        src,
        adr,
        namelen
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srt_connect_group(
    group: SRTSOCKET,
    name: *mut SRT_SOCKGROUPCONFIG,
    arraysize: c_int
) -> c_int
{
    srt_connect_group(
        group,
        name,
        arraysize
    )
}

    
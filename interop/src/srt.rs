/* automatically generated by rust-bindgen 0.64.0 */

pub const SRT_VERSION_MAJOR: u32 = 1;
pub const SRT_VERSION_MINOR: u32 = 5;
pub const SRT_VERSION_PATCH: u32 = 1;
pub const SRT_VERSION_STRING: &[u8; 6usize] = b"1.5.1\0";
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const SRT_LOG_LEVEL_MIN: u32 = 2;
pub const SRT_LOG_LEVEL_MAX: u32 = 7;
pub const SRT_LOGF_DISABLE_TIME: u32 = 1;
pub const SRT_LOGF_DISABLE_THREADNAME: u32 = 2;
pub const SRT_LOGF_DISABLE_SEVERITY: u32 = 4;
pub const SRT_LOGF_DISABLE_EOL: u32 = 8;
pub const SRT_VERSION_FEAT_HSv5: u32 = 66304;
pub const SRT_HAVE_CXX17: u32 = 0;
pub const SRT_REJC_INTERNAL: u32 = 0;
pub const SRT_REJC_PREDEFINED: u32 = 1000;
pub const SRT_REJC_USERDEFINED: u32 = 2000;
pub const SRT_LOGFA_GENERAL: u32 = 0;
pub const SRT_LOGFA_SOCKMGMT: u32 = 1;
pub const SRT_LOGFA_CONN: u32 = 2;
pub const SRT_LOGFA_XTIMER: u32 = 3;
pub const SRT_LOGFA_TSBPD: u32 = 4;
pub const SRT_LOGFA_RSRC: u32 = 5;
pub const SRT_LOGFA_CONGEST: u32 = 7;
pub const SRT_LOGFA_PFILTER: u32 = 8;
pub const SRT_LOGFA_API_CTRL: u32 = 11;
pub const SRT_LOGFA_QUE_CTRL: u32 = 13;
pub const SRT_LOGFA_EPOLL_UPD: u32 = 16;
pub const SRT_LOGFA_API_RECV: u32 = 21;
pub const SRT_LOGFA_BUF_RECV: u32 = 22;
pub const SRT_LOGFA_QUE_RECV: u32 = 23;
pub const SRT_LOGFA_CHN_RECV: u32 = 24;
pub const SRT_LOGFA_GRP_RECV: u32 = 25;
pub const SRT_LOGFA_API_SEND: u32 = 31;
pub const SRT_LOGFA_BUF_SEND: u32 = 32;
pub const SRT_LOGFA_QUE_SEND: u32 = 33;
pub const SRT_LOGFA_CHN_SEND: u32 = 34;
pub const SRT_LOGFA_GRP_SEND: u32 = 35;
pub const SRT_LOGFA_INTERNAL: u32 = 41;
pub const SRT_LOGFA_QUE_MGMT: u32 = 43;
pub const SRT_LOGFA_CHN_MGMT: u32 = 44;
pub const SRT_LOGFA_GRP_MGMT: u32 = 45;
pub const SRT_LOGFA_EPOLL_API: u32 = 46;
pub const SRT_LOGFA_HAICRYPT: u32 = 6;
pub const SRT_LOGFA_APPLOG: u32 = 10;
pub const SRT_LOGFA_LASTNONE: u32 = 63;
pub const SRT_DEFAULT_SENDFILE_BLOCK: u32 = 364000;
pub const SRT_DEFAULT_RECVFILE_BLOCK: u32 = 7280000;
pub const SRT_SYNC_CLOCK_STDCXX_STEADY: u32 = 0;
pub const SRT_SYNC_CLOCK_GETTIME_MONOTONIC: u32 = 1;
pub const SRT_SYNC_CLOCK_WINQPC: u32 = 2;
pub const SRT_SYNC_CLOCK_MACH_ABSTIME: u32 = 3;
pub const SRT_SYNC_CLOCK_POSIX_GETTIMEOFDAY: u32 = 4;
pub const SRT_SYNC_CLOCK_AMD64_RDTSC: u32 = 5;
pub const SRT_SYNC_CLOCK_IA32_RDTSC: u32 = 6;
pub const SRT_SYNC_CLOCK_IA64_ITC: u32 = 7;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_storage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_padding) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_align) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub type SRT_LOG_HANDLER_FN = ::std::option::Option<
    unsafe extern "C" fn(
        opaque: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        area: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ),
>;
pub type SRTSOCKET = i32;
pub type SYSSOCKET = ::std::os::raw::c_int;
pub type UDPSOCKET = SYSSOCKET;
pub const SRT_SOCKSTATUS_SRTS_INIT: SRT_SOCKSTATUS = 1;
pub const SRT_SOCKSTATUS_SRTS_OPENED: SRT_SOCKSTATUS = 2;
pub const SRT_SOCKSTATUS_SRTS_LISTENING: SRT_SOCKSTATUS = 3;
pub const SRT_SOCKSTATUS_SRTS_CONNECTING: SRT_SOCKSTATUS = 4;
pub const SRT_SOCKSTATUS_SRTS_CONNECTED: SRT_SOCKSTATUS = 5;
pub const SRT_SOCKSTATUS_SRTS_BROKEN: SRT_SOCKSTATUS = 6;
pub const SRT_SOCKSTATUS_SRTS_CLOSING: SRT_SOCKSTATUS = 7;
pub const SRT_SOCKSTATUS_SRTS_CLOSED: SRT_SOCKSTATUS = 8;
pub const SRT_SOCKSTATUS_SRTS_NONEXIST: SRT_SOCKSTATUS = 9;
pub type SRT_SOCKSTATUS = ::std::os::raw::c_uint;
pub const SRT_SOCKOPT_SRTO_MSS: SRT_SOCKOPT = 0;
pub const SRT_SOCKOPT_SRTO_SNDSYN: SRT_SOCKOPT = 1;
pub const SRT_SOCKOPT_SRTO_RCVSYN: SRT_SOCKOPT = 2;
pub const SRT_SOCKOPT_SRTO_ISN: SRT_SOCKOPT = 3;
pub const SRT_SOCKOPT_SRTO_FC: SRT_SOCKOPT = 4;
pub const SRT_SOCKOPT_SRTO_SNDBUF: SRT_SOCKOPT = 5;
pub const SRT_SOCKOPT_SRTO_RCVBUF: SRT_SOCKOPT = 6;
pub const SRT_SOCKOPT_SRTO_LINGER: SRT_SOCKOPT = 7;
pub const SRT_SOCKOPT_SRTO_UDP_SNDBUF: SRT_SOCKOPT = 8;
pub const SRT_SOCKOPT_SRTO_UDP_RCVBUF: SRT_SOCKOPT = 9;
pub const SRT_SOCKOPT_SRTO_RENDEZVOUS: SRT_SOCKOPT = 12;
pub const SRT_SOCKOPT_SRTO_SNDTIMEO: SRT_SOCKOPT = 13;
pub const SRT_SOCKOPT_SRTO_RCVTIMEO: SRT_SOCKOPT = 14;
pub const SRT_SOCKOPT_SRTO_REUSEADDR: SRT_SOCKOPT = 15;
pub const SRT_SOCKOPT_SRTO_MAXBW: SRT_SOCKOPT = 16;
pub const SRT_SOCKOPT_SRTO_STATE: SRT_SOCKOPT = 17;
pub const SRT_SOCKOPT_SRTO_EVENT: SRT_SOCKOPT = 18;
pub const SRT_SOCKOPT_SRTO_SNDDATA: SRT_SOCKOPT = 19;
pub const SRT_SOCKOPT_SRTO_RCVDATA: SRT_SOCKOPT = 20;
pub const SRT_SOCKOPT_SRTO_SENDER: SRT_SOCKOPT = 21;
pub const SRT_SOCKOPT_SRTO_TSBPDMODE: SRT_SOCKOPT = 22;
pub const SRT_SOCKOPT_SRTO_LATENCY: SRT_SOCKOPT = 23;
pub const SRT_SOCKOPT_SRTO_INPUTBW: SRT_SOCKOPT = 24;
pub const SRT_SOCKOPT_SRTO_OHEADBW: SRT_SOCKOPT = 25;
pub const SRT_SOCKOPT_SRTO_PASSPHRASE: SRT_SOCKOPT = 26;
pub const SRT_SOCKOPT_SRTO_PBKEYLEN: SRT_SOCKOPT = 27;
pub const SRT_SOCKOPT_SRTO_KMSTATE: SRT_SOCKOPT = 28;
pub const SRT_SOCKOPT_SRTO_IPTTL: SRT_SOCKOPT = 29;
pub const SRT_SOCKOPT_SRTO_IPTOS: SRT_SOCKOPT = 30;
pub const SRT_SOCKOPT_SRTO_TLPKTDROP: SRT_SOCKOPT = 31;
pub const SRT_SOCKOPT_SRTO_SNDDROPDELAY: SRT_SOCKOPT = 32;
pub const SRT_SOCKOPT_SRTO_NAKREPORT: SRT_SOCKOPT = 33;
pub const SRT_SOCKOPT_SRTO_VERSION: SRT_SOCKOPT = 34;
pub const SRT_SOCKOPT_SRTO_PEERVERSION: SRT_SOCKOPT = 35;
pub const SRT_SOCKOPT_SRTO_CONNTIMEO: SRT_SOCKOPT = 36;
pub const SRT_SOCKOPT_SRTO_DRIFTTRACER: SRT_SOCKOPT = 37;
pub const SRT_SOCKOPT_SRTO_MININPUTBW: SRT_SOCKOPT = 38;
pub const SRT_SOCKOPT_SRTO_SNDKMSTATE: SRT_SOCKOPT = 40;
pub const SRT_SOCKOPT_SRTO_RCVKMSTATE: SRT_SOCKOPT = 41;
pub const SRT_SOCKOPT_SRTO_LOSSMAXTTL: SRT_SOCKOPT = 42;
pub const SRT_SOCKOPT_SRTO_RCVLATENCY: SRT_SOCKOPT = 43;
pub const SRT_SOCKOPT_SRTO_PEERLATENCY: SRT_SOCKOPT = 44;
pub const SRT_SOCKOPT_SRTO_MINVERSION: SRT_SOCKOPT = 45;
pub const SRT_SOCKOPT_SRTO_STREAMID: SRT_SOCKOPT = 46;
pub const SRT_SOCKOPT_SRTO_CONGESTION: SRT_SOCKOPT = 47;
pub const SRT_SOCKOPT_SRTO_MESSAGEAPI: SRT_SOCKOPT = 48;
pub const SRT_SOCKOPT_SRTO_PAYLOADSIZE: SRT_SOCKOPT = 49;
pub const SRT_SOCKOPT_SRTO_TRANSTYPE: SRT_SOCKOPT = 50;
pub const SRT_SOCKOPT_SRTO_KMREFRESHRATE: SRT_SOCKOPT = 51;
pub const SRT_SOCKOPT_SRTO_KMPREANNOUNCE: SRT_SOCKOPT = 52;
pub const SRT_SOCKOPT_SRTO_ENFORCEDENCRYPTION: SRT_SOCKOPT = 53;
pub const SRT_SOCKOPT_SRTO_IPV6ONLY: SRT_SOCKOPT = 54;
pub const SRT_SOCKOPT_SRTO_PEERIDLETIMEO: SRT_SOCKOPT = 55;
pub const SRT_SOCKOPT_SRTO_BINDTODEVICE: SRT_SOCKOPT = 56;
pub const SRT_SOCKOPT_SRTO_GROUPCONNECT: SRT_SOCKOPT = 57;
pub const SRT_SOCKOPT_SRTO_GROUPMINSTABLETIMEO: SRT_SOCKOPT = 58;
pub const SRT_SOCKOPT_SRTO_GROUPTYPE: SRT_SOCKOPT = 59;
pub const SRT_SOCKOPT_SRTO_PACKETFILTER: SRT_SOCKOPT = 60;
pub const SRT_SOCKOPT_SRTO_RETRANSMITALGO: SRT_SOCKOPT = 61;
pub const SRT_SOCKOPT_SRTO_E_SIZE: SRT_SOCKOPT = 62;
pub type SRT_SOCKOPT = ::std::os::raw::c_uint;
pub const SRT_SOCKOPT_DEPRECATED_SRTO_DEPRECATED_END: SRT_SOCKOPT_DEPRECATED = 0;
pub type SRT_SOCKOPT_DEPRECATED = ::std::os::raw::c_uint;
pub const SRT_TRANSTYPE_SRTT_LIVE: SRT_TRANSTYPE = 0;
pub const SRT_TRANSTYPE_SRTT_FILE: SRT_TRANSTYPE = 1;
pub const SRT_TRANSTYPE_SRTT_INVALID: SRT_TRANSTYPE = 2;
pub type SRT_TRANSTYPE = ::std::os::raw::c_uint;
pub const SRT_LIVE_DEF_PLSIZE: ::std::os::raw::c_int = 1316;
pub const SRT_LIVE_MAX_PLSIZE: ::std::os::raw::c_int = 1456;
pub const SRT_LIVE_DEF_LATENCY_MS: ::std::os::raw::c_int = 120;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CBytePerfMon {
    pub msTimeStamp: i64,
    pub pktSentTotal: i64,
    pub pktRecvTotal: i64,
    pub pktSndLossTotal: ::std::os::raw::c_int,
    pub pktRcvLossTotal: ::std::os::raw::c_int,
    pub pktRetransTotal: ::std::os::raw::c_int,
    pub pktSentACKTotal: ::std::os::raw::c_int,
    pub pktRecvACKTotal: ::std::os::raw::c_int,
    pub pktSentNAKTotal: ::std::os::raw::c_int,
    pub pktRecvNAKTotal: ::std::os::raw::c_int,
    pub usSndDurationTotal: i64,
    pub pktSndDropTotal: ::std::os::raw::c_int,
    pub pktRcvDropTotal: ::std::os::raw::c_int,
    pub pktRcvUndecryptTotal: ::std::os::raw::c_int,
    pub byteSentTotal: u64,
    pub byteRecvTotal: u64,
    pub byteRcvLossTotal: u64,
    pub byteRetransTotal: u64,
    pub byteSndDropTotal: u64,
    pub byteRcvDropTotal: u64,
    pub byteRcvUndecryptTotal: u64,
    pub pktSent: i64,
    pub pktRecv: i64,
    pub pktSndLoss: ::std::os::raw::c_int,
    pub pktRcvLoss: ::std::os::raw::c_int,
    pub pktRetrans: ::std::os::raw::c_int,
    pub pktRcvRetrans: ::std::os::raw::c_int,
    pub pktSentACK: ::std::os::raw::c_int,
    pub pktRecvACK: ::std::os::raw::c_int,
    pub pktSentNAK: ::std::os::raw::c_int,
    pub pktRecvNAK: ::std::os::raw::c_int,
    pub mbpsSendRate: f64,
    pub mbpsRecvRate: f64,
    pub usSndDuration: i64,
    pub pktReorderDistance: ::std::os::raw::c_int,
    pub pktRcvAvgBelatedTime: f64,
    pub pktRcvBelated: i64,
    pub pktSndDrop: ::std::os::raw::c_int,
    pub pktRcvDrop: ::std::os::raw::c_int,
    pub pktRcvUndecrypt: ::std::os::raw::c_int,
    pub byteSent: u64,
    pub byteRecv: u64,
    pub byteRcvLoss: u64,
    pub byteRetrans: u64,
    pub byteSndDrop: u64,
    pub byteRcvDrop: u64,
    pub byteRcvUndecrypt: u64,
    pub usPktSndPeriod: f64,
    pub pktFlowWindow: ::std::os::raw::c_int,
    pub pktCongestionWindow: ::std::os::raw::c_int,
    pub pktFlightSize: ::std::os::raw::c_int,
    pub msRTT: f64,
    pub mbpsBandwidth: f64,
    pub byteAvailSndBuf: ::std::os::raw::c_int,
    pub byteAvailRcvBuf: ::std::os::raw::c_int,
    pub mbpsMaxBW: f64,
    pub byteMSS: ::std::os::raw::c_int,
    pub pktSndBuf: ::std::os::raw::c_int,
    pub byteSndBuf: ::std::os::raw::c_int,
    pub msSndBuf: ::std::os::raw::c_int,
    pub msSndTsbPdDelay: ::std::os::raw::c_int,
    pub pktRcvBuf: ::std::os::raw::c_int,
    pub byteRcvBuf: ::std::os::raw::c_int,
    pub msRcvBuf: ::std::os::raw::c_int,
    pub msRcvTsbPdDelay: ::std::os::raw::c_int,
    pub pktSndFilterExtraTotal: ::std::os::raw::c_int,
    pub pktRcvFilterExtraTotal: ::std::os::raw::c_int,
    pub pktRcvFilterSupplyTotal: ::std::os::raw::c_int,
    pub pktRcvFilterLossTotal: ::std::os::raw::c_int,
    pub pktSndFilterExtra: ::std::os::raw::c_int,
    pub pktRcvFilterExtra: ::std::os::raw::c_int,
    pub pktRcvFilterSupply: ::std::os::raw::c_int,
    pub pktRcvFilterLoss: ::std::os::raw::c_int,
    pub pktReorderTolerance: ::std::os::raw::c_int,
    pub pktSentUniqueTotal: i64,
    pub pktRecvUniqueTotal: i64,
    pub byteSentUniqueTotal: u64,
    pub byteRecvUniqueTotal: u64,
    pub pktSentUnique: i64,
    pub pktRecvUnique: i64,
    pub byteSentUnique: u64,
    pub byteRecvUnique: u64,
}
#[test]
fn bindgen_test_layout_CBytePerfMon() {
    const UNINIT: ::std::mem::MaybeUninit<CBytePerfMon> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBytePerfMon>(),
        496usize,
        concat!("Size of: ", stringify!(CBytePerfMon))
    );
    assert_eq!(
        ::std::mem::align_of::<CBytePerfMon>(),
        8usize,
        concat!("Alignment of ", stringify!(CBytePerfMon))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msTimeStamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(msTimeStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSentTotal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSentTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRecvTotal) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRecvTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSndLossTotal) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSndLossTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvLossTotal) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvLossTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRetransTotal) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRetransTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSentACKTotal) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSentACKTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRecvACKTotal) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRecvACKTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSentNAKTotal) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSentNAKTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRecvNAKTotal) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRecvNAKTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usSndDurationTotal) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(usSndDurationTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSndDropTotal) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSndDropTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvDropTotal) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvDropTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvUndecryptTotal) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvUndecryptTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteSentTotal) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteSentTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteRecvTotal) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteRecvTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteRcvLossTotal) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteRcvLossTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteRetransTotal) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteRetransTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteSndDropTotal) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteSndDropTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteRcvDropTotal) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteRcvDropTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteRcvUndecryptTotal) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteRcvUndecryptTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSent) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRecv) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRecv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSndLoss) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSndLoss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvLoss) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvLoss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRetrans) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRetrans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvRetrans) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvRetrans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSentACK) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSentACK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRecvACK) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRecvACK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSentNAK) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSentNAK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRecvNAK) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRecvNAK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbpsSendRate) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(mbpsSendRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbpsRecvRate) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(mbpsRecvRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usSndDuration) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(usSndDuration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktReorderDistance) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktReorderDistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvAvgBelatedTime) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvAvgBelatedTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvBelated) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvBelated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSndDrop) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSndDrop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvDrop) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvDrop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvUndecrypt) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvUndecrypt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteSent) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteSent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteRecv) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteRecv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteRcvLoss) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteRcvLoss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteRetrans) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteRetrans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteSndDrop) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteSndDrop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteRcvDrop) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteRcvDrop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteRcvUndecrypt) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteRcvUndecrypt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usPktSndPeriod) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(usPktSndPeriod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktFlowWindow) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktFlowWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktCongestionWindow) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktCongestionWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktFlightSize) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktFlightSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msRTT) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(msRTT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbpsBandwidth) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(mbpsBandwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteAvailSndBuf) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteAvailSndBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteAvailRcvBuf) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteAvailRcvBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbpsMaxBW) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(mbpsMaxBW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteMSS) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteMSS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSndBuf) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSndBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteSndBuf) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteSndBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msSndBuf) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(msSndBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msSndTsbPdDelay) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(msSndTsbPdDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvBuf) as usize - ptr as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteRcvBuf) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteRcvBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msRcvBuf) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(msRcvBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msRcvTsbPdDelay) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(msRcvTsbPdDelay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSndFilterExtraTotal) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSndFilterExtraTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvFilterExtraTotal) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvFilterExtraTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvFilterSupplyTotal) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvFilterSupplyTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvFilterLossTotal) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvFilterLossTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSndFilterExtra) as usize - ptr as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSndFilterExtra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvFilterExtra) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvFilterExtra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvFilterSupply) as usize - ptr as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvFilterSupply)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRcvFilterLoss) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRcvFilterLoss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktReorderTolerance) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktReorderTolerance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSentUniqueTotal) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSentUniqueTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRecvUniqueTotal) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRecvUniqueTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteSentUniqueTotal) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteSentUniqueTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteRecvUniqueTotal) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteRecvUniqueTotal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktSentUnique) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktSentUnique)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktRecvUnique) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(pktRecvUnique)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteSentUnique) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteSentUnique)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteRecvUnique) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(CBytePerfMon),
            "::",
            stringify!(byteRecvUnique)
        )
    );
}
pub const SRT_ERRNO_SRT_EUNKNOWN: SRT_ERRNO = -1;
pub const SRT_ERRNO_SRT_SUCCESS: SRT_ERRNO = 0;
pub const SRT_ERRNO_SRT_ECONNSETUP: SRT_ERRNO = 1000;
pub const SRT_ERRNO_SRT_ENOSERVER: SRT_ERRNO = 1001;
pub const SRT_ERRNO_SRT_ECONNREJ: SRT_ERRNO = 1002;
pub const SRT_ERRNO_SRT_ESOCKFAIL: SRT_ERRNO = 1003;
pub const SRT_ERRNO_SRT_ESECFAIL: SRT_ERRNO = 1004;
pub const SRT_ERRNO_SRT_ESCLOSED: SRT_ERRNO = 1005;
pub const SRT_ERRNO_SRT_ECONNFAIL: SRT_ERRNO = 2000;
pub const SRT_ERRNO_SRT_ECONNLOST: SRT_ERRNO = 2001;
pub const SRT_ERRNO_SRT_ENOCONN: SRT_ERRNO = 2002;
pub const SRT_ERRNO_SRT_ERESOURCE: SRT_ERRNO = 3000;
pub const SRT_ERRNO_SRT_ETHREAD: SRT_ERRNO = 3001;
pub const SRT_ERRNO_SRT_ENOBUF: SRT_ERRNO = 3002;
pub const SRT_ERRNO_SRT_ESYSOBJ: SRT_ERRNO = 3003;
pub const SRT_ERRNO_SRT_EFILE: SRT_ERRNO = 4000;
pub const SRT_ERRNO_SRT_EINVRDOFF: SRT_ERRNO = 4001;
pub const SRT_ERRNO_SRT_ERDPERM: SRT_ERRNO = 4002;
pub const SRT_ERRNO_SRT_EINVWROFF: SRT_ERRNO = 4003;
pub const SRT_ERRNO_SRT_EWRPERM: SRT_ERRNO = 4004;
pub const SRT_ERRNO_SRT_EINVOP: SRT_ERRNO = 5000;
pub const SRT_ERRNO_SRT_EBOUNDSOCK: SRT_ERRNO = 5001;
pub const SRT_ERRNO_SRT_ECONNSOCK: SRT_ERRNO = 5002;
pub const SRT_ERRNO_SRT_EINVPARAM: SRT_ERRNO = 5003;
pub const SRT_ERRNO_SRT_EINVSOCK: SRT_ERRNO = 5004;
pub const SRT_ERRNO_SRT_EUNBOUNDSOCK: SRT_ERRNO = 5005;
pub const SRT_ERRNO_SRT_ENOLISTEN: SRT_ERRNO = 5006;
pub const SRT_ERRNO_SRT_ERDVNOSERV: SRT_ERRNO = 5007;
pub const SRT_ERRNO_SRT_ERDVUNBOUND: SRT_ERRNO = 5008;
pub const SRT_ERRNO_SRT_EINVALMSGAPI: SRT_ERRNO = 5009;
pub const SRT_ERRNO_SRT_EINVALBUFFERAPI: SRT_ERRNO = 5010;
pub const SRT_ERRNO_SRT_EDUPLISTEN: SRT_ERRNO = 5011;
pub const SRT_ERRNO_SRT_ELARGEMSG: SRT_ERRNO = 5012;
pub const SRT_ERRNO_SRT_EINVPOLLID: SRT_ERRNO = 5013;
pub const SRT_ERRNO_SRT_EPOLLEMPTY: SRT_ERRNO = 5014;
pub const SRT_ERRNO_SRT_EBINDCONFLICT: SRT_ERRNO = 5015;
pub const SRT_ERRNO_SRT_EASYNCFAIL: SRT_ERRNO = 6000;
pub const SRT_ERRNO_SRT_EASYNCSND: SRT_ERRNO = 6001;
pub const SRT_ERRNO_SRT_EASYNCRCV: SRT_ERRNO = 6002;
pub const SRT_ERRNO_SRT_ETIMEOUT: SRT_ERRNO = 6003;
pub const SRT_ERRNO_SRT_ECONGEST: SRT_ERRNO = 6004;
pub const SRT_ERRNO_SRT_EPEERERR: SRT_ERRNO = 7000;
pub type SRT_ERRNO = ::std::os::raw::c_int;
pub const SRT_REJECT_REASON_SRT_REJ_UNKNOWN: SRT_REJECT_REASON = 0;
pub const SRT_REJECT_REASON_SRT_REJ_SYSTEM: SRT_REJECT_REASON = 1;
pub const SRT_REJECT_REASON_SRT_REJ_PEER: SRT_REJECT_REASON = 2;
pub const SRT_REJECT_REASON_SRT_REJ_RESOURCE: SRT_REJECT_REASON = 3;
pub const SRT_REJECT_REASON_SRT_REJ_ROGUE: SRT_REJECT_REASON = 4;
pub const SRT_REJECT_REASON_SRT_REJ_BACKLOG: SRT_REJECT_REASON = 5;
pub const SRT_REJECT_REASON_SRT_REJ_IPE: SRT_REJECT_REASON = 6;
pub const SRT_REJECT_REASON_SRT_REJ_CLOSE: SRT_REJECT_REASON = 7;
pub const SRT_REJECT_REASON_SRT_REJ_VERSION: SRT_REJECT_REASON = 8;
pub const SRT_REJECT_REASON_SRT_REJ_RDVCOOKIE: SRT_REJECT_REASON = 9;
pub const SRT_REJECT_REASON_SRT_REJ_BADSECRET: SRT_REJECT_REASON = 10;
pub const SRT_REJECT_REASON_SRT_REJ_UNSECURE: SRT_REJECT_REASON = 11;
pub const SRT_REJECT_REASON_SRT_REJ_MESSAGEAPI: SRT_REJECT_REASON = 12;
pub const SRT_REJECT_REASON_SRT_REJ_CONGESTION: SRT_REJECT_REASON = 13;
pub const SRT_REJECT_REASON_SRT_REJ_FILTER: SRT_REJECT_REASON = 14;
pub const SRT_REJECT_REASON_SRT_REJ_GROUP: SRT_REJECT_REASON = 15;
pub const SRT_REJECT_REASON_SRT_REJ_TIMEOUT: SRT_REJECT_REASON = 16;
pub const SRT_REJECT_REASON_SRT_REJ_E_SIZE: SRT_REJECT_REASON = 17;
pub type SRT_REJECT_REASON = ::std::os::raw::c_uint;
pub const SRT_KM_STATE_SRT_KM_S_UNSECURED: SRT_KM_STATE = 0;
pub const SRT_KM_STATE_SRT_KM_S_SECURING: SRT_KM_STATE = 1;
pub const SRT_KM_STATE_SRT_KM_S_SECURED: SRT_KM_STATE = 2;
pub const SRT_KM_STATE_SRT_KM_S_NOSECRET: SRT_KM_STATE = 3;
pub const SRT_KM_STATE_SRT_KM_S_BADSECRET: SRT_KM_STATE = 4;
pub type SRT_KM_STATE = ::std::os::raw::c_uint;
pub const SRT_EPOLL_OPT_SRT_EPOLL_OPT_NONE: SRT_EPOLL_OPT = 0;
#[doc = " Ready for 'recv' operation:\n\n - For stream mode it means that at least 1 byte is available.\n In this mode the buffer may extract only a part of the packet,\n leaving next data possible for extraction later.\n\n - For message mode it means that there is at least one packet\n available (this may change in future, as it is desired that\n one full message should only wake up, not single packet of a\n not yet extractable message).\n\n - For live mode it means that there's at least one packet\n ready to play.\n\n - For listener sockets, this means that there is a new connection\n waiting for pickup through the `srt_accept()` call, that is,\n the next call to `srt_accept()` will succeed without blocking\n (see an alias SRT_EPOLL_ACCEPT below)."]
pub const SRT_EPOLL_OPT_SRT_EPOLL_IN: SRT_EPOLL_OPT = 1;
#[doc = " Ready for 'send' operation.\n\n - For stream mode it means that there's a free space in the\n sender buffer for at least 1 byte of data. The next send\n operation will only allow to send as much data as it is free\n space in the buffer.\n\n - For message mode it means that there's a free space for at\n least one UDP packet. The edge-triggered mode can be used to\n pick up updates as the free space in the sender buffer grows.\n\n - For live mode it means that there's a free space for at least\n one UDP packet. On the other hand, no readiness for OUT usually\n means an extraordinary congestion on the link, meaning also that\n you should immediately slow down the sending rate or you may get\n a connection break soon.\n\n - For non-blocking sockets used with `srt_connect*` operation,\n this flag simply means that the connection was established."]
pub const SRT_EPOLL_OPT_SRT_EPOLL_OUT: SRT_EPOLL_OPT = 4;
#[doc = " The socket has encountered an error in the last operation\n and the next operation on that socket will end up with error.\n You can retry the operation, but getting the error from it\n is certain, so you may as well close the socket."]
pub const SRT_EPOLL_OPT_SRT_EPOLL_ERR: SRT_EPOLL_OPT = 8;
#[doc = " The socket has encountered an error in the last operation\n and the next operation on that socket will end up with error.\n You can retry the operation, but getting the error from it\n is certain, so you may as well close the socket."]
pub const SRT_EPOLL_OPT_SRT_EPOLL_CONNECT: SRT_EPOLL_OPT = 4;
#[doc = " The socket has encountered an error in the last operation\n and the next operation on that socket will end up with error.\n You can retry the operation, but getting the error from it\n is certain, so you may as well close the socket."]
pub const SRT_EPOLL_OPT_SRT_EPOLL_ACCEPT: SRT_EPOLL_OPT = 1;
#[doc = " The socket has encountered an error in the last operation\n and the next operation on that socket will end up with error.\n You can retry the operation, but getting the error from it\n is certain, so you may as well close the socket."]
pub const SRT_EPOLL_OPT_SRT_EPOLL_UPDATE: SRT_EPOLL_OPT = 16;
#[doc = " The socket has encountered an error in the last operation\n and the next operation on that socket will end up with error.\n You can retry the operation, but getting the error from it\n is certain, so you may as well close the socket."]
pub const SRT_EPOLL_OPT_SRT_EPOLL_ET: SRT_EPOLL_OPT = 2147483648;
pub type SRT_EPOLL_OPT = ::std::os::raw::c_uint;
pub type SRT_EPOLL_T = i32;
#[doc = " This allows the EID container to be empty when calling the waiting\n function with infinite time. This means an infinite hangup, although\n a socket can be added to this EID from a separate thread."]
pub const SRT_EPOLL_FLAGS_SRT_EPOLL_ENABLE_EMPTY: SRT_EPOLL_FLAGS = 1;
#[doc = " This makes the waiting function check if there is output container\n passed to it, and report an error if it isn't. By default it is allowed\n that the output container is 0 size or NULL and therefore the readiness\n state is reported only as a number of ready sockets from return value."]
pub const SRT_EPOLL_FLAGS_SRT_EPOLL_ENABLE_OUTPUTCHECK: SRT_EPOLL_FLAGS = 2;
pub type SRT_EPOLL_FLAGS = ::std::os::raw::c_uint;
pub type SRT_TRACEBSTATS = CBytePerfMon;
pub const SRT_INVALID_SOCK: SRTSOCKET = -1;
pub const SRT_ERROR: ::std::os::raw::c_int = -1;
extern "C" {
    pub fn srt_startup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_cleanup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_socket(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> SRTSOCKET;
}
extern "C" {
    pub fn srt_create_socket() -> SRTSOCKET;
}
extern "C" {
    pub fn srt_bind(
        u: SRTSOCKET,
        name: *const sockaddr,
        namelen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_bind_acquire(u: SRTSOCKET, sys_udp_sock: UDPSOCKET) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_listen(u: SRTSOCKET, backlog: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_accept(
        u: SRTSOCKET,
        addr: *mut sockaddr,
        addrlen: *mut ::std::os::raw::c_int,
    ) -> SRTSOCKET;
}
extern "C" {
    pub fn srt_accept_bond(
        listeners: *const SRTSOCKET,
        lsize: ::std::os::raw::c_int,
        msTimeOut: i64,
    ) -> SRTSOCKET;
}
pub type srt_listen_callback_fn = ::std::option::Option<
    unsafe extern "C" fn(
        opaq: *mut ::std::os::raw::c_void,
        ns: SRTSOCKET,
        hsversion: ::std::os::raw::c_int,
        peeraddr: *const sockaddr,
        streamid: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn srt_listen_callback(
        lsn: SRTSOCKET,
        hook_fn: srt_listen_callback_fn,
        hook_opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type srt_connect_callback_fn = ::std::option::Option<
    unsafe extern "C" fn(
        opaq: *mut ::std::os::raw::c_void,
        ns: SRTSOCKET,
        errorcode: ::std::os::raw::c_int,
        peeraddr: *const sockaddr,
        token: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    pub fn srt_connect_callback(
        clr: SRTSOCKET,
        hook_fn: srt_connect_callback_fn,
        hook_opaque: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_connect(
        u: SRTSOCKET,
        name: *const sockaddr,
        namelen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_connect_debug(
        u: SRTSOCKET,
        name: *const sockaddr,
        namelen: ::std::os::raw::c_int,
        forced_isn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_connect_bind(
        u: SRTSOCKET,
        source: *const sockaddr,
        target: *const sockaddr,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_rendezvous(
        u: SRTSOCKET,
        local_name: *const sockaddr,
        local_namelen: ::std::os::raw::c_int,
        remote_name: *const sockaddr,
        remote_namelen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_close(u: SRTSOCKET) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_getpeername(
        u: SRTSOCKET,
        name: *mut sockaddr,
        namelen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_getsockname(
        u: SRTSOCKET,
        name: *mut sockaddr,
        namelen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_getsockopt(
        u: SRTSOCKET,
        level: ::std::os::raw::c_int,
        optname: SRT_SOCKOPT,
        optval: *mut ::std::os::raw::c_void,
        optlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_setsockopt(
        u: SRTSOCKET,
        level: ::std::os::raw::c_int,
        optname: SRT_SOCKOPT,
        optval: *const ::std::os::raw::c_void,
        optlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_getsockflag(
        u: SRTSOCKET,
        opt: SRT_SOCKOPT,
        optval: *mut ::std::os::raw::c_void,
        optlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_setsockflag(
        u: SRTSOCKET,
        opt: SRT_SOCKOPT,
        optval: *const ::std::os::raw::c_void,
        optlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type SRT_SOCKGROUPDATA = SRT_SocketGroupData_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SRT_MsgCtrl_ {
    pub flags: ::std::os::raw::c_int,
    pub msgttl: ::std::os::raw::c_int,
    pub inorder: ::std::os::raw::c_int,
    pub boundary: ::std::os::raw::c_int,
    pub srctime: i64,
    pub pktseq: i32,
    pub msgno: i32,
    pub grpdata: *mut SRT_SOCKGROUPDATA,
    pub grpdata_size: usize,
}
#[test]
fn bindgen_test_layout_SRT_MsgCtrl_() {
    const UNINIT: ::std::mem::MaybeUninit<SRT_MsgCtrl_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SRT_MsgCtrl_>(),
        48usize,
        concat!("Size of: ", stringify!(SRT_MsgCtrl_))
    );
    assert_eq!(
        ::std::mem::align_of::<SRT_MsgCtrl_>(),
        8usize,
        concat!("Alignment of ", stringify!(SRT_MsgCtrl_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_MsgCtrl_),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgttl) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_MsgCtrl_),
            "::",
            stringify!(msgttl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inorder) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_MsgCtrl_),
            "::",
            stringify!(inorder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boundary) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_MsgCtrl_),
            "::",
            stringify!(boundary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srctime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_MsgCtrl_),
            "::",
            stringify!(srctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pktseq) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_MsgCtrl_),
            "::",
            stringify!(pktseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgno) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_MsgCtrl_),
            "::",
            stringify!(msgno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grpdata) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_MsgCtrl_),
            "::",
            stringify!(grpdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grpdata_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_MsgCtrl_),
            "::",
            stringify!(grpdata_size)
        )
    );
}
pub type SRT_MSGCTRL = SRT_MsgCtrl_;
pub const SRT_SEQNO_NONE: i32 = -1;
pub const SRT_MSGNO_NONE: i32 = -1;
pub const SRT_MSGNO_CONTROL: i32 = 0;
pub const SRT_MSGTTL_INF: ::std::os::raw::c_int = -1;
extern "C" {
    pub fn srt_msgctrl_init(mctrl: *mut SRT_MSGCTRL);
}
extern "C" {
    pub fn srt_send(
        u: SRTSOCKET,
        buf: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_sendmsg(
        u: SRTSOCKET,
        buf: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        ttl: ::std::os::raw::c_int,
        inorder: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_sendmsg2(
        u: SRTSOCKET,
        buf: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        mctrl: *mut SRT_MSGCTRL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_recv(
        u: SRTSOCKET,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_recvmsg(
        u: SRTSOCKET,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_recvmsg2(
        u: SRTSOCKET,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        mctrl: *mut SRT_MSGCTRL,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_sendfile(
        u: SRTSOCKET,
        path: *const ::std::os::raw::c_char,
        offset: *mut i64,
        size: i64,
        block: ::std::os::raw::c_int,
    ) -> i64;
}
extern "C" {
    pub fn srt_recvfile(
        u: SRTSOCKET,
        path: *const ::std::os::raw::c_char,
        offset: *mut i64,
        size: i64,
        block: ::std::os::raw::c_int,
    ) -> i64;
}
extern "C" {
    pub fn srt_getlasterror_str() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn srt_getlasterror(errno_loc: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_strerror(
        code: ::std::os::raw::c_int,
        errnoval: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn srt_clearlasterror();
}
extern "C" {
    pub fn srt_bstats(
        u: SRTSOCKET,
        perf: *mut SRT_TRACEBSTATS,
        clear: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_bistats(
        u: SRTSOCKET,
        perf: *mut SRT_TRACEBSTATS,
        clear: ::std::os::raw::c_int,
        instantaneous: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_getsockstate(u: SRTSOCKET) -> SRT_SOCKSTATUS;
}
extern "C" {
    pub fn srt_epoll_create() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_epoll_clear_usocks(eid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_epoll_add_usock(
        eid: ::std::os::raw::c_int,
        u: SRTSOCKET,
        events: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_epoll_add_ssock(
        eid: ::std::os::raw::c_int,
        s: SYSSOCKET,
        events: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_epoll_remove_usock(
        eid: ::std::os::raw::c_int,
        u: SRTSOCKET,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_epoll_remove_ssock(
        eid: ::std::os::raw::c_int,
        s: SYSSOCKET,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_epoll_update_usock(
        eid: ::std::os::raw::c_int,
        u: SRTSOCKET,
        events: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_epoll_update_ssock(
        eid: ::std::os::raw::c_int,
        s: SYSSOCKET,
        events: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_epoll_wait(
        eid: ::std::os::raw::c_int,
        readfds: *mut SRTSOCKET,
        rnum: *mut ::std::os::raw::c_int,
        writefds: *mut SRTSOCKET,
        wnum: *mut ::std::os::raw::c_int,
        msTimeOut: i64,
        lrfds: *mut SYSSOCKET,
        lrnum: *mut ::std::os::raw::c_int,
        lwfds: *mut SYSSOCKET,
        lwnum: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SRT_EPOLL_EVENT_STR {
    pub fd: SRTSOCKET,
    pub events: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SRT_EPOLL_EVENT_STR() {
    const UNINIT: ::std::mem::MaybeUninit<SRT_EPOLL_EVENT_STR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SRT_EPOLL_EVENT_STR>(),
        8usize,
        concat!("Size of: ", stringify!(SRT_EPOLL_EVENT_STR))
    );
    assert_eq!(
        ::std::mem::align_of::<SRT_EPOLL_EVENT_STR>(),
        4usize,
        concat!("Alignment of ", stringify!(SRT_EPOLL_EVENT_STR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_EPOLL_EVENT_STR),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_EPOLL_EVENT_STR),
            "::",
            stringify!(events)
        )
    );
}
pub type SRT_EPOLL_EVENT = SRT_EPOLL_EVENT_STR;
extern "C" {
    pub fn srt_epoll_uwait(
        eid: ::std::os::raw::c_int,
        fdsSet: *mut SRT_EPOLL_EVENT,
        fdsSize: ::std::os::raw::c_int,
        msTimeOut: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_epoll_set(eid: ::std::os::raw::c_int, flags: i32) -> i32;
}
extern "C" {
    pub fn srt_epoll_release(eid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_setloglevel(ll: ::std::os::raw::c_int);
}
extern "C" {
    pub fn srt_addlogfa(fa: ::std::os::raw::c_int);
}
extern "C" {
    pub fn srt_dellogfa(fa: ::std::os::raw::c_int);
}
extern "C" {
    pub fn srt_resetlogfa(fara: *const ::std::os::raw::c_int, fara_size: usize);
}
extern "C" {
    pub fn srt_setloghandler(opaque: *mut ::std::os::raw::c_void, handler: SRT_LOG_HANDLER_FN);
}
extern "C" {
    pub fn srt_setlogflags(flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn srt_getsndbuffer(
        sock: SRTSOCKET,
        blocks: *mut usize,
        bytes: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_getrejectreason(sock: SRTSOCKET) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_setrejectreason(
        sock: SRTSOCKET,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_rejectreason_str(id: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn srt_getversion() -> u32;
}
extern "C" {
    pub fn srt_time_now() -> i64;
}
extern "C" {
    pub fn srt_connection_time(sock: SRTSOCKET) -> i64;
}
extern "C" {
    pub fn srt_clock_type() -> ::std::os::raw::c_int;
}
pub const SRT_GROUP_TYPE_SRT_GTYPE_UNDEFINED: SRT_GROUP_TYPE = 0;
pub const SRT_GROUP_TYPE_SRT_GTYPE_BROADCAST: SRT_GROUP_TYPE = 1;
pub const SRT_GROUP_TYPE_SRT_GTYPE_BACKUP: SRT_GROUP_TYPE = 2;
pub const SRT_GROUP_TYPE_SRT_GTYPE_E_END: SRT_GROUP_TYPE = 3;
pub type SRT_GROUP_TYPE = ::std::os::raw::c_uint;
pub const SRT_GFLAG_SYNCONMSG: u32 = 1;
pub const SRT_MemberStatus_SRT_GST_PENDING: SRT_MemberStatus = 0;
pub const SRT_MemberStatus_SRT_GST_IDLE: SRT_MemberStatus = 1;
pub const SRT_MemberStatus_SRT_GST_RUNNING: SRT_MemberStatus = 2;
pub const SRT_MemberStatus_SRT_GST_BROKEN: SRT_MemberStatus = 3;
pub type SRT_MemberStatus = ::std::os::raw::c_uint;
pub use self::SRT_MemberStatus as SRT_MEMBERSTATUS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SRT_SocketGroupData_ {
    pub id: SRTSOCKET,
    pub peeraddr: sockaddr_storage,
    pub sockstate: SRT_SOCKSTATUS,
    pub weight: u16,
    pub memberstate: SRT_MEMBERSTATUS,
    pub result: ::std::os::raw::c_int,
    pub token: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SRT_SocketGroupData_() {
    const UNINIT: ::std::mem::MaybeUninit<SRT_SocketGroupData_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SRT_SocketGroupData_>(),
        160usize,
        concat!("Size of: ", stringify!(SRT_SocketGroupData_))
    );
    assert_eq!(
        ::std::mem::align_of::<SRT_SocketGroupData_>(),
        8usize,
        concat!("Alignment of ", stringify!(SRT_SocketGroupData_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_SocketGroupData_),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peeraddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_SocketGroupData_),
            "::",
            stringify!(peeraddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sockstate) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_SocketGroupData_),
            "::",
            stringify!(sockstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_SocketGroupData_),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memberstate) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_SocketGroupData_),
            "::",
            stringify!(memberstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_SocketGroupData_),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_SocketGroupData_),
            "::",
            stringify!(token)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SRT_SocketOptionObject {
    _unused: [u8; 0],
}
pub type SRT_SOCKOPT_CONFIG = SRT_SocketOptionObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SRT_GroupMemberConfig_ {
    pub id: SRTSOCKET,
    pub srcaddr: sockaddr_storage,
    pub peeraddr: sockaddr_storage,
    pub weight: u16,
    pub config: *mut SRT_SOCKOPT_CONFIG,
    pub errorcode: ::std::os::raw::c_int,
    pub token: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SRT_GroupMemberConfig_() {
    const UNINIT: ::std::mem::MaybeUninit<SRT_GroupMemberConfig_> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SRT_GroupMemberConfig_>(),
        288usize,
        concat!("Size of: ", stringify!(SRT_GroupMemberConfig_))
    );
    assert_eq!(
        ::std::mem::align_of::<SRT_GroupMemberConfig_>(),
        8usize,
        concat!("Alignment of ", stringify!(SRT_GroupMemberConfig_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_GroupMemberConfig_),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_GroupMemberConfig_),
            "::",
            stringify!(srcaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peeraddr) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_GroupMemberConfig_),
            "::",
            stringify!(peeraddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_GroupMemberConfig_),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_GroupMemberConfig_),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errorcode) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_GroupMemberConfig_),
            "::",
            stringify!(errorcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(SRT_GroupMemberConfig_),
            "::",
            stringify!(token)
        )
    );
}
pub type SRT_SOCKGROUPCONFIG = SRT_GroupMemberConfig_;
extern "C" {
    pub fn srt_create_group(arg1: SRT_GROUP_TYPE) -> SRTSOCKET;
}
extern "C" {
    pub fn srt_groupof(socket: SRTSOCKET) -> SRTSOCKET;
}
extern "C" {
    pub fn srt_group_data(
        socketgroup: SRTSOCKET,
        output: *mut SRT_SOCKGROUPDATA,
        inoutlen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_create_config() -> *mut SRT_SOCKOPT_CONFIG;
}
extern "C" {
    pub fn srt_delete_config(config: *mut SRT_SOCKOPT_CONFIG);
}
extern "C" {
    pub fn srt_config_add(
        config: *mut SRT_SOCKOPT_CONFIG,
        option: SRT_SOCKOPT,
        contents: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srt_prepare_endpoint(
        src: *const sockaddr,
        adr: *const sockaddr,
        namelen: ::std::os::raw::c_int,
    ) -> SRT_SOCKGROUPCONFIG;
}
extern "C" {
    pub fn srt_connect_group(
        group: SRTSOCKET,
        name: *mut SRT_SOCKGROUPCONFIG,
        arraysize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
